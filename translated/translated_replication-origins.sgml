```sgml
<chapter>
  <title>복제 진행 추적</title>

  <section>
    <title>복제 원본</title>

    <para>복제 원본은 논리 디코딩 위에 논리 복제 솔루션을 구현하는 것을 더 쉽게 만들기 위해 설계되었습니다. 이들은 두 가지 일반적인 문제에 대한 해결책을 제공합니다:</para>

    <itemizedlist>
      <listitem>
        <para>복제 진행 상황을 안전하게 추적하는 방법</para>
      </listitem>
      <listitem>
        <para>행의 원본에 따라 복제 동작을 변경하는 방법; 예를 들어, 양방향 복제 설정에서 루프를 방지하기 위해</para>
      </listitem>
    </itemizedlist>

    <para>복제 원본은 이름과 ID라는 두 가지 속성만 가지고 있습니다. 이름은 시스템 간에 원본을 참조하는 데 사용해야 하며, 자유 형식의 텍스트입니다. 이는 서로 다른 복제 솔루션에 의해 생성된 복제 원본 간의 충돌 가능성을 낮추는 방식으로 사용해야 합니다; 예를 들어, 복제 솔루션의 이름을 접두사로 붙이는 방식입니다. ID는 공간 효율성이 중요한 상황에서 긴 버전을 저장할 필요가 없도록 사용됩니다. 이는 시스템 간에 공유되어서는 안 됩니다.</para>

    <para>복제 원본은 <command>pg_replication_origin_create();</command> 함수를 사용하여 생성할 수 있으며, <command>pg_replication_origin_drop();</command>을 사용하여 삭제할 수 있고, <xref linkend="pg_replication_origin"/> 시스템 카탈로그에서 확인할 수 있습니다.</para>

    <para>복제 솔루션을 구축하는 데 있어 비트리비얼한 부분 중 하나는 재생 진행 상황을 안전한 방식으로 추적하는 것입니다. 적용 프로세스 또는 전체 클러스터가 중단되면 데이터가 성공적으로 복제된 시점까지 확인할 수 있어야 합니다. 이를 위한 단순한 해결책, 즉 재생된 트랜잭션마다 테이블의 행을 업데이트하는 것과 같은 방법은 런타임 오버헤드와 데이터베이스 부풀어 오름과 같은 문제를 가지고 있습니다.</para>

    <para>복제 원본 인프라를 사용하여 세션을 원격 노드에서 재생 중으로 표시할 수 있습니다 ( <command>pg_replication_origin_session_setup()</command> 함수를 사용). 또한 모든 소스 트랜잭션의 LSN 및 커밋 타임스탬프를 트랜잭션 기준으로 구성할 수 있습니다 ( <command>pg_replication_origin_xact_setup()</command> 사용). 그렇게 하면 복제 진행 상황이 충돌 안전한 방식으로 지속됩니다. 모든 복제 원본에 대한 재생 진행 상황은 <xref linkend="pg_replication_origin_status"/> 뷰에서 확인할 수 있습니다. 개별 원본의 진행 상황, 예를 들어 복제를 재개할 때, <command>pg_replication_origin_progress()</command>를 사용하여 모든 원본에 대해 확인하거나 현재 세션에 구성된 원본에 대해 <command>pg_replication_origin_session_progress()</command>를 사용할 수 있습니다.</para>

    <para>정확히 하나의 시스템에서 다른 하나의 시스템으로 복제하는 것보다 더 복잡한 복제 토폴로지에서는 재생된 행을 다시 복제하는 것을 피하기 어려운 또 다른 문제가 발생할 수 있습니다. 이는 복제에서 사이클과 비효율성을 초래할 수 있습니다. 복제 원본은 이를 인식하고 방지하는 선택적 메커니즘을 제공합니다. 이전 단락에서 언급된 함수를 사용하여 구성하면, 세션에서 생성된 모든 변경 사항 및 트랜잭션은 생성 세션의 복제 원본으로 태그가 지정됩니다. 이를 통해 출력 플러그인에서 다르게 처리할 수 있습니다; 예를 들어, 로컬에서 발생한 행을 제외한 모든 행을 무시하는 방식입니다. 또한 <command>filter_by_origin_cb</command> 콜백을 사용하여 소스에 따라 논리 디코딩 변경 스트림을 필터링할 수 있습니다. 덜 유연하지만, 해당 콜백을 통한 필터링은 출력 플러그인에서 수행하는 것보다 상당히 더 효율적입니다.</para>
  </section>
</chapter>
```